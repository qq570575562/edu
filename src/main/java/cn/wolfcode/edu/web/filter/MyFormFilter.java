package cn.wolfcode.edu.web.filter;import cn.wolfcode.edu.util.JsonResult;import com.fasterxml.jackson.databind.ObjectMapper;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.AuthenticationToken;import org.apache.shiro.authc.IncorrectCredentialsException;import org.apache.shiro.authc.UnknownAccountException;import org.apache.shiro.subject.Subject;import org.apache.shiro.web.filter.authc.FormAuthenticationFilter;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServletResponse;import java.io.IOException;/** * Created by felix on 2017/12/20. */public class MyFormFilter extends FormAuthenticationFilter {	@Override	protected boolean onLoginSuccess(AuthenticationToken token, Subject subject, ServletRequest request, ServletResponse response) throws Exception {		HttpServletResponse resp = (HttpServletResponse)response;		//返回JsonResult数据		resp.getWriter().print(new ObjectMapper().writeValueAsString(new JsonResult(true)));		//不再执行后面的过滤器,所以也不会来到我们的/login.do		return false;	}	//登陆提示失败说明配置的过滤器生效, 想要登陆成功需要准备数据源realm	@Override	protected boolean onLoginFailure(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response) {		HttpServletResponse resp = (HttpServletResponse)response;		String errorMsg = "登陆失败,请联系管理员";		if (e instanceof UnknownAccountException){		    errorMsg = "用户名不存在!";		}else if (e instanceof IncorrectCredentialsException){		    errorMsg = "密码错误!";		}		//返回JsonResult数据		try {			resp.getWriter().print(new ObjectMapper().writeValueAsString(new JsonResult(false, errorMsg)));		}catch (IOException e1){			e1.printStackTrace();		}		e.printStackTrace(); //注意这里记得打印下异常信息,有些异常信息是无法打印的(除了上面的账户/密码错误)		//不再执行后面的过滤器,所以也不会来到我们的/login.do		return false;	}	//解决重复登陆问题(不小心清除缓存,就不能再登陆)	@Override	protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) {		//这方法是所有ul路径都经过的		//如果是登陆请求/login.do才注销之前登陆过的subject		if (this.isLoginRequest(request, response)){            Subject subject = SecurityUtils.getSubject(); //获取访问项目1(程序/或者用户)            if (subject.isAuthenticated()){                subject.logout();            }        }		return super.isAccessAllowed(request, response, mappedValue);	}}