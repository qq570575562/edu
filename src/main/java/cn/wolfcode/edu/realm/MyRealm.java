package cn.wolfcode.edu.realm;import cn.wolfcode.edu.domain.Employee;import cn.wolfcode.edu.service.IEmployeeService;import cn.wolfcode.edu.service.IPermissionService;import cn.wolfcode.edu.service.IRoleService;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.AuthenticationInfo;import org.apache.shiro.authc.AuthenticationToken;import org.apache.shiro.authc.SimpleAuthenticationInfo;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.authz.SimpleAuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;import org.apache.shiro.util.ByteSource;import org.springframework.beans.factory.annotation.Autowired;import java.util.List;/** * Created by felix on 2017/12/20. */public class MyRealm extends AuthorizingRealm {	@Autowired	private IEmployeeService service;	@Autowired	private IRoleService roleService;	@Autowired	private IPermissionService permissionService;	// 认证	@Override	protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken)			throws AuthenticationException {		// 获取用户输入名		String principal = (String) authenticationToken.getPrincipal();		// 查询数据库是否存在该用户名		Employee employee = service.getEmployeeByUsername(principal);		if (employee == null) {			return null;		}		// 如果不为空,就拿我们返回的对象中的正确的凭证,使用凭证匹配器来做密码匹配		// (身份信息,正确的凭证,加盐,realm的名字) 为了让其生效,需要去shiro.xml中配置bean信息		return new SimpleAuthenticationInfo(employee, employee.getPassword(), ByteSource.Util.bytes(principal),				this.getName());	}	// 授权 (方式1: 使用ifelse的方式)	@Override	protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {		// 授权信息的对象		SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();		// 当前登陆用户		Employee employee = (Employee) principalCollection.getPrimaryPrincipal();		// 判断如果是管理员		if (employee.isAdmin()) {			// //角色集合			info.addRole("Admin");			// 权限集合			info.addStringPermission("*:*"); // 指定xx有哪些权限,employee:view表示只有员工的页面查看权限		} else {			// 从数据库查询出来的,当前登陆用户的权限信息			List<String> roles = roleService.getRoleByEmployeeId(employee.getId());			info.addRoles(roles);						//获取当前用户的全部权限			List<String> resources = permissionService.getResourceByEid(employee.getId());			info.addStringPermissions(resources);				}		return info;	}}